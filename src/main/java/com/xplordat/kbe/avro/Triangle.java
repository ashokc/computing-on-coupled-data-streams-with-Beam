/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.xplordat.kbe.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Triangle extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3936466158360349212L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Triangle\",\"namespace\":\"com.xplordat.kbe.avro\",\"fields\":[{\"name\":\"window_start\",\"type\":\"long\"},{\"name\":\"window_end\",\"type\":\"long\"},{\"name\":\"window_mid_time\",\"type\":\"long\"},{\"name\":\"ab\",\"type\":\"double\"},{\"name\":\"bc\",\"type\":\"double\"},{\"name\":\"ca\",\"type\":\"double\"},{\"name\":\"perimeter\",\"type\":\"double\"},{\"name\":\"area\",\"type\":\"double\"},{\"name\":\"total_samples_used\",\"type\":\"int\"},{\"name\":\"compute_time\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Triangle> ENCODER =
      new BinaryMessageEncoder<Triangle>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Triangle> DECODER =
      new BinaryMessageDecoder<Triangle>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Triangle> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Triangle> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Triangle> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Triangle>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Triangle to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Triangle from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Triangle instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Triangle fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private long window_start;
   private long window_end;
   private long window_mid_time;
   private double ab;
   private double bc;
   private double ca;
   private double perimeter;
   private double area;
   private int total_samples_used;
   private long compute_time;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Triangle() {}

  /**
   * All-args constructor.
   * @param window_start The new value for window_start
   * @param window_end The new value for window_end
   * @param window_mid_time The new value for window_mid_time
   * @param ab The new value for ab
   * @param bc The new value for bc
   * @param ca The new value for ca
   * @param perimeter The new value for perimeter
   * @param area The new value for area
   * @param total_samples_used The new value for total_samples_used
   * @param compute_time The new value for compute_time
   */
  public Triangle(java.lang.Long window_start, java.lang.Long window_end, java.lang.Long window_mid_time, java.lang.Double ab, java.lang.Double bc, java.lang.Double ca, java.lang.Double perimeter, java.lang.Double area, java.lang.Integer total_samples_used, java.lang.Long compute_time) {
    this.window_start = window_start;
    this.window_end = window_end;
    this.window_mid_time = window_mid_time;
    this.ab = ab;
    this.bc = bc;
    this.ca = ca;
    this.perimeter = perimeter;
    this.area = area;
    this.total_samples_used = total_samples_used;
    this.compute_time = compute_time;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return window_start;
    case 1: return window_end;
    case 2: return window_mid_time;
    case 3: return ab;
    case 4: return bc;
    case 5: return ca;
    case 6: return perimeter;
    case 7: return area;
    case 8: return total_samples_used;
    case 9: return compute_time;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: window_start = (java.lang.Long)value$; break;
    case 1: window_end = (java.lang.Long)value$; break;
    case 2: window_mid_time = (java.lang.Long)value$; break;
    case 3: ab = (java.lang.Double)value$; break;
    case 4: bc = (java.lang.Double)value$; break;
    case 5: ca = (java.lang.Double)value$; break;
    case 6: perimeter = (java.lang.Double)value$; break;
    case 7: area = (java.lang.Double)value$; break;
    case 8: total_samples_used = (java.lang.Integer)value$; break;
    case 9: compute_time = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'window_start' field.
   * @return The value of the 'window_start' field.
   */
  public long getWindowStart() {
    return window_start;
  }


  /**
   * Sets the value of the 'window_start' field.
   * @param value the value to set.
   */
  public void setWindowStart(long value) {
    this.window_start = value;
  }

  /**
   * Gets the value of the 'window_end' field.
   * @return The value of the 'window_end' field.
   */
  public long getWindowEnd() {
    return window_end;
  }


  /**
   * Sets the value of the 'window_end' field.
   * @param value the value to set.
   */
  public void setWindowEnd(long value) {
    this.window_end = value;
  }

  /**
   * Gets the value of the 'window_mid_time' field.
   * @return The value of the 'window_mid_time' field.
   */
  public long getWindowMidTime() {
    return window_mid_time;
  }


  /**
   * Sets the value of the 'window_mid_time' field.
   * @param value the value to set.
   */
  public void setWindowMidTime(long value) {
    this.window_mid_time = value;
  }

  /**
   * Gets the value of the 'ab' field.
   * @return The value of the 'ab' field.
   */
  public double getAb() {
    return ab;
  }


  /**
   * Sets the value of the 'ab' field.
   * @param value the value to set.
   */
  public void setAb(double value) {
    this.ab = value;
  }

  /**
   * Gets the value of the 'bc' field.
   * @return The value of the 'bc' field.
   */
  public double getBc() {
    return bc;
  }


  /**
   * Sets the value of the 'bc' field.
   * @param value the value to set.
   */
  public void setBc(double value) {
    this.bc = value;
  }

  /**
   * Gets the value of the 'ca' field.
   * @return The value of the 'ca' field.
   */
  public double getCa() {
    return ca;
  }


  /**
   * Sets the value of the 'ca' field.
   * @param value the value to set.
   */
  public void setCa(double value) {
    this.ca = value;
  }

  /**
   * Gets the value of the 'perimeter' field.
   * @return The value of the 'perimeter' field.
   */
  public double getPerimeter() {
    return perimeter;
  }


  /**
   * Sets the value of the 'perimeter' field.
   * @param value the value to set.
   */
  public void setPerimeter(double value) {
    this.perimeter = value;
  }

  /**
   * Gets the value of the 'area' field.
   * @return The value of the 'area' field.
   */
  public double getArea() {
    return area;
  }


  /**
   * Sets the value of the 'area' field.
   * @param value the value to set.
   */
  public void setArea(double value) {
    this.area = value;
  }

  /**
   * Gets the value of the 'total_samples_used' field.
   * @return The value of the 'total_samples_used' field.
   */
  public int getTotalSamplesUsed() {
    return total_samples_used;
  }


  /**
   * Sets the value of the 'total_samples_used' field.
   * @param value the value to set.
   */
  public void setTotalSamplesUsed(int value) {
    this.total_samples_used = value;
  }

  /**
   * Gets the value of the 'compute_time' field.
   * @return The value of the 'compute_time' field.
   */
  public long getComputeTime() {
    return compute_time;
  }


  /**
   * Sets the value of the 'compute_time' field.
   * @param value the value to set.
   */
  public void setComputeTime(long value) {
    this.compute_time = value;
  }

  /**
   * Creates a new Triangle RecordBuilder.
   * @return A new Triangle RecordBuilder
   */
  public static com.xplordat.kbe.avro.Triangle.Builder newBuilder() {
    return new com.xplordat.kbe.avro.Triangle.Builder();
  }

  /**
   * Creates a new Triangle RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Triangle RecordBuilder
   */
  public static com.xplordat.kbe.avro.Triangle.Builder newBuilder(com.xplordat.kbe.avro.Triangle.Builder other) {
    if (other == null) {
      return new com.xplordat.kbe.avro.Triangle.Builder();
    } else {
      return new com.xplordat.kbe.avro.Triangle.Builder(other);
    }
  }

  /**
   * Creates a new Triangle RecordBuilder by copying an existing Triangle instance.
   * @param other The existing instance to copy.
   * @return A new Triangle RecordBuilder
   */
  public static com.xplordat.kbe.avro.Triangle.Builder newBuilder(com.xplordat.kbe.avro.Triangle other) {
    if (other == null) {
      return new com.xplordat.kbe.avro.Triangle.Builder();
    } else {
      return new com.xplordat.kbe.avro.Triangle.Builder(other);
    }
  }

  /**
   * RecordBuilder for Triangle instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Triangle>
    implements org.apache.avro.data.RecordBuilder<Triangle> {

    private long window_start;
    private long window_end;
    private long window_mid_time;
    private double ab;
    private double bc;
    private double ca;
    private double perimeter;
    private double area;
    private int total_samples_used;
    private long compute_time;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.xplordat.kbe.avro.Triangle.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.window_start)) {
        this.window_start = data().deepCopy(fields()[0].schema(), other.window_start);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.window_end)) {
        this.window_end = data().deepCopy(fields()[1].schema(), other.window_end);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.window_mid_time)) {
        this.window_mid_time = data().deepCopy(fields()[2].schema(), other.window_mid_time);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.ab)) {
        this.ab = data().deepCopy(fields()[3].schema(), other.ab);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.bc)) {
        this.bc = data().deepCopy(fields()[4].schema(), other.bc);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.ca)) {
        this.ca = data().deepCopy(fields()[5].schema(), other.ca);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.perimeter)) {
        this.perimeter = data().deepCopy(fields()[6].schema(), other.perimeter);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.area)) {
        this.area = data().deepCopy(fields()[7].schema(), other.area);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.total_samples_used)) {
        this.total_samples_used = data().deepCopy(fields()[8].schema(), other.total_samples_used);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.compute_time)) {
        this.compute_time = data().deepCopy(fields()[9].schema(), other.compute_time);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing Triangle instance
     * @param other The existing instance to copy.
     */
    private Builder(com.xplordat.kbe.avro.Triangle other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.window_start)) {
        this.window_start = data().deepCopy(fields()[0].schema(), other.window_start);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.window_end)) {
        this.window_end = data().deepCopy(fields()[1].schema(), other.window_end);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.window_mid_time)) {
        this.window_mid_time = data().deepCopy(fields()[2].schema(), other.window_mid_time);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ab)) {
        this.ab = data().deepCopy(fields()[3].schema(), other.ab);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.bc)) {
        this.bc = data().deepCopy(fields()[4].schema(), other.bc);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.ca)) {
        this.ca = data().deepCopy(fields()[5].schema(), other.ca);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.perimeter)) {
        this.perimeter = data().deepCopy(fields()[6].schema(), other.perimeter);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.area)) {
        this.area = data().deepCopy(fields()[7].schema(), other.area);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.total_samples_used)) {
        this.total_samples_used = data().deepCopy(fields()[8].schema(), other.total_samples_used);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.compute_time)) {
        this.compute_time = data().deepCopy(fields()[9].schema(), other.compute_time);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'window_start' field.
      * @return The value.
      */
    public long getWindowStart() {
      return window_start;
    }


    /**
      * Sets the value of the 'window_start' field.
      * @param value The value of 'window_start'.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.Triangle.Builder setWindowStart(long value) {
      validate(fields()[0], value);
      this.window_start = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'window_start' field has been set.
      * @return True if the 'window_start' field has been set, false otherwise.
      */
    public boolean hasWindowStart() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'window_start' field.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.Triangle.Builder clearWindowStart() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'window_end' field.
      * @return The value.
      */
    public long getWindowEnd() {
      return window_end;
    }


    /**
      * Sets the value of the 'window_end' field.
      * @param value The value of 'window_end'.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.Triangle.Builder setWindowEnd(long value) {
      validate(fields()[1], value);
      this.window_end = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'window_end' field has been set.
      * @return True if the 'window_end' field has been set, false otherwise.
      */
    public boolean hasWindowEnd() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'window_end' field.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.Triangle.Builder clearWindowEnd() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'window_mid_time' field.
      * @return The value.
      */
    public long getWindowMidTime() {
      return window_mid_time;
    }


    /**
      * Sets the value of the 'window_mid_time' field.
      * @param value The value of 'window_mid_time'.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.Triangle.Builder setWindowMidTime(long value) {
      validate(fields()[2], value);
      this.window_mid_time = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'window_mid_time' field has been set.
      * @return True if the 'window_mid_time' field has been set, false otherwise.
      */
    public boolean hasWindowMidTime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'window_mid_time' field.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.Triangle.Builder clearWindowMidTime() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'ab' field.
      * @return The value.
      */
    public double getAb() {
      return ab;
    }


    /**
      * Sets the value of the 'ab' field.
      * @param value The value of 'ab'.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.Triangle.Builder setAb(double value) {
      validate(fields()[3], value);
      this.ab = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'ab' field has been set.
      * @return True if the 'ab' field has been set, false otherwise.
      */
    public boolean hasAb() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'ab' field.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.Triangle.Builder clearAb() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'bc' field.
      * @return The value.
      */
    public double getBc() {
      return bc;
    }


    /**
      * Sets the value of the 'bc' field.
      * @param value The value of 'bc'.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.Triangle.Builder setBc(double value) {
      validate(fields()[4], value);
      this.bc = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'bc' field has been set.
      * @return True if the 'bc' field has been set, false otherwise.
      */
    public boolean hasBc() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'bc' field.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.Triangle.Builder clearBc() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'ca' field.
      * @return The value.
      */
    public double getCa() {
      return ca;
    }


    /**
      * Sets the value of the 'ca' field.
      * @param value The value of 'ca'.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.Triangle.Builder setCa(double value) {
      validate(fields()[5], value);
      this.ca = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'ca' field has been set.
      * @return True if the 'ca' field has been set, false otherwise.
      */
    public boolean hasCa() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'ca' field.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.Triangle.Builder clearCa() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'perimeter' field.
      * @return The value.
      */
    public double getPerimeter() {
      return perimeter;
    }


    /**
      * Sets the value of the 'perimeter' field.
      * @param value The value of 'perimeter'.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.Triangle.Builder setPerimeter(double value) {
      validate(fields()[6], value);
      this.perimeter = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'perimeter' field has been set.
      * @return True if the 'perimeter' field has been set, false otherwise.
      */
    public boolean hasPerimeter() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'perimeter' field.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.Triangle.Builder clearPerimeter() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'area' field.
      * @return The value.
      */
    public double getArea() {
      return area;
    }


    /**
      * Sets the value of the 'area' field.
      * @param value The value of 'area'.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.Triangle.Builder setArea(double value) {
      validate(fields()[7], value);
      this.area = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'area' field has been set.
      * @return True if the 'area' field has been set, false otherwise.
      */
    public boolean hasArea() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'area' field.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.Triangle.Builder clearArea() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'total_samples_used' field.
      * @return The value.
      */
    public int getTotalSamplesUsed() {
      return total_samples_used;
    }


    /**
      * Sets the value of the 'total_samples_used' field.
      * @param value The value of 'total_samples_used'.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.Triangle.Builder setTotalSamplesUsed(int value) {
      validate(fields()[8], value);
      this.total_samples_used = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'total_samples_used' field has been set.
      * @return True if the 'total_samples_used' field has been set, false otherwise.
      */
    public boolean hasTotalSamplesUsed() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'total_samples_used' field.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.Triangle.Builder clearTotalSamplesUsed() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'compute_time' field.
      * @return The value.
      */
    public long getComputeTime() {
      return compute_time;
    }


    /**
      * Sets the value of the 'compute_time' field.
      * @param value The value of 'compute_time'.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.Triangle.Builder setComputeTime(long value) {
      validate(fields()[9], value);
      this.compute_time = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'compute_time' field has been set.
      * @return True if the 'compute_time' field has been set, false otherwise.
      */
    public boolean hasComputeTime() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'compute_time' field.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.Triangle.Builder clearComputeTime() {
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Triangle build() {
      try {
        Triangle record = new Triangle();
        record.window_start = fieldSetFlags()[0] ? this.window_start : (java.lang.Long) defaultValue(fields()[0]);
        record.window_end = fieldSetFlags()[1] ? this.window_end : (java.lang.Long) defaultValue(fields()[1]);
        record.window_mid_time = fieldSetFlags()[2] ? this.window_mid_time : (java.lang.Long) defaultValue(fields()[2]);
        record.ab = fieldSetFlags()[3] ? this.ab : (java.lang.Double) defaultValue(fields()[3]);
        record.bc = fieldSetFlags()[4] ? this.bc : (java.lang.Double) defaultValue(fields()[4]);
        record.ca = fieldSetFlags()[5] ? this.ca : (java.lang.Double) defaultValue(fields()[5]);
        record.perimeter = fieldSetFlags()[6] ? this.perimeter : (java.lang.Double) defaultValue(fields()[6]);
        record.area = fieldSetFlags()[7] ? this.area : (java.lang.Double) defaultValue(fields()[7]);
        record.total_samples_used = fieldSetFlags()[8] ? this.total_samples_used : (java.lang.Integer) defaultValue(fields()[8]);
        record.compute_time = fieldSetFlags()[9] ? this.compute_time : (java.lang.Long) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Triangle>
    WRITER$ = (org.apache.avro.io.DatumWriter<Triangle>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Triangle>
    READER$ = (org.apache.avro.io.DatumReader<Triangle>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.window_start);

    out.writeLong(this.window_end);

    out.writeLong(this.window_mid_time);

    out.writeDouble(this.ab);

    out.writeDouble(this.bc);

    out.writeDouble(this.ca);

    out.writeDouble(this.perimeter);

    out.writeDouble(this.area);

    out.writeInt(this.total_samples_used);

    out.writeLong(this.compute_time);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.window_start = in.readLong();

      this.window_end = in.readLong();

      this.window_mid_time = in.readLong();

      this.ab = in.readDouble();

      this.bc = in.readDouble();

      this.ca = in.readDouble();

      this.perimeter = in.readDouble();

      this.area = in.readDouble();

      this.total_samples_used = in.readInt();

      this.compute_time = in.readLong();

    } else {
      for (int i = 0; i < 10; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.window_start = in.readLong();
          break;

        case 1:
          this.window_end = in.readLong();
          break;

        case 2:
          this.window_mid_time = in.readLong();
          break;

        case 3:
          this.ab = in.readDouble();
          break;

        case 4:
          this.bc = in.readDouble();
          break;

        case 5:
          this.ca = in.readDouble();
          break;

        case 6:
          this.perimeter = in.readDouble();
          break;

        case 7:
          this.area = in.readDouble();
          break;

        case 8:
          this.total_samples_used = in.readInt();
          break;

        case 9:
          this.compute_time = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










