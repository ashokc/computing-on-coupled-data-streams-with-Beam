/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.xplordat.kbe.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class EstimatedVertex extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6403761561832410709L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EstimatedVertex\",\"namespace\":\"com.xplordat.kbe.avro\",\"fields\":[{\"name\":\"sensor\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"X\",\"type\":\"double\"},{\"name\":\"Y\",\"type\":\"double\"},{\"name\":\"time\",\"type\":\"long\"},{\"name\":\"nsamples\",\"type\":\"int\"},{\"name\":\"compute_time\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EstimatedVertex> ENCODER =
      new BinaryMessageEncoder<EstimatedVertex>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EstimatedVertex> DECODER =
      new BinaryMessageDecoder<EstimatedVertex>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EstimatedVertex> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EstimatedVertex> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EstimatedVertex> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EstimatedVertex>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EstimatedVertex to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EstimatedVertex from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EstimatedVertex instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EstimatedVertex fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String sensor;
   private double X;
   private double Y;
   private long time;
   private int nsamples;
   private long compute_time;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EstimatedVertex() {}

  /**
   * All-args constructor.
   * @param sensor The new value for sensor
   * @param X The new value for X
   * @param Y The new value for Y
   * @param time The new value for time
   * @param nsamples The new value for nsamples
   * @param compute_time The new value for compute_time
   */
  public EstimatedVertex(java.lang.String sensor, java.lang.Double X, java.lang.Double Y, java.lang.Long time, java.lang.Integer nsamples, java.lang.Long compute_time) {
    this.sensor = sensor;
    this.X = X;
    this.Y = Y;
    this.time = time;
    this.nsamples = nsamples;
    this.compute_time = compute_time;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sensor;
    case 1: return X;
    case 2: return Y;
    case 3: return time;
    case 4: return nsamples;
    case 5: return compute_time;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sensor = value$ != null ? value$.toString() : null; break;
    case 1: X = (java.lang.Double)value$; break;
    case 2: Y = (java.lang.Double)value$; break;
    case 3: time = (java.lang.Long)value$; break;
    case 4: nsamples = (java.lang.Integer)value$; break;
    case 5: compute_time = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'sensor' field.
   * @return The value of the 'sensor' field.
   */
  public java.lang.String getSensor() {
    return sensor;
  }


  /**
   * Sets the value of the 'sensor' field.
   * @param value the value to set.
   */
  public void setSensor(java.lang.String value) {
    this.sensor = value;
  }

  /**
   * Gets the value of the 'X' field.
   * @return The value of the 'X' field.
   */
  public double getX() {
    return X;
  }


  /**
   * Sets the value of the 'X' field.
   * @param value the value to set.
   */
  public void setX(double value) {
    this.X = value;
  }

  /**
   * Gets the value of the 'Y' field.
   * @return The value of the 'Y' field.
   */
  public double getY() {
    return Y;
  }


  /**
   * Sets the value of the 'Y' field.
   * @param value the value to set.
   */
  public void setY(double value) {
    this.Y = value;
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public long getTime() {
    return time;
  }


  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(long value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'nsamples' field.
   * @return The value of the 'nsamples' field.
   */
  public int getNsamples() {
    return nsamples;
  }


  /**
   * Sets the value of the 'nsamples' field.
   * @param value the value to set.
   */
  public void setNsamples(int value) {
    this.nsamples = value;
  }

  /**
   * Gets the value of the 'compute_time' field.
   * @return The value of the 'compute_time' field.
   */
  public long getComputeTime() {
    return compute_time;
  }


  /**
   * Sets the value of the 'compute_time' field.
   * @param value the value to set.
   */
  public void setComputeTime(long value) {
    this.compute_time = value;
  }

  /**
   * Creates a new EstimatedVertex RecordBuilder.
   * @return A new EstimatedVertex RecordBuilder
   */
  public static com.xplordat.kbe.avro.EstimatedVertex.Builder newBuilder() {
    return new com.xplordat.kbe.avro.EstimatedVertex.Builder();
  }

  /**
   * Creates a new EstimatedVertex RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EstimatedVertex RecordBuilder
   */
  public static com.xplordat.kbe.avro.EstimatedVertex.Builder newBuilder(com.xplordat.kbe.avro.EstimatedVertex.Builder other) {
    if (other == null) {
      return new com.xplordat.kbe.avro.EstimatedVertex.Builder();
    } else {
      return new com.xplordat.kbe.avro.EstimatedVertex.Builder(other);
    }
  }

  /**
   * Creates a new EstimatedVertex RecordBuilder by copying an existing EstimatedVertex instance.
   * @param other The existing instance to copy.
   * @return A new EstimatedVertex RecordBuilder
   */
  public static com.xplordat.kbe.avro.EstimatedVertex.Builder newBuilder(com.xplordat.kbe.avro.EstimatedVertex other) {
    if (other == null) {
      return new com.xplordat.kbe.avro.EstimatedVertex.Builder();
    } else {
      return new com.xplordat.kbe.avro.EstimatedVertex.Builder(other);
    }
  }

  /**
   * RecordBuilder for EstimatedVertex instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EstimatedVertex>
    implements org.apache.avro.data.RecordBuilder<EstimatedVertex> {

    private java.lang.String sensor;
    private double X;
    private double Y;
    private long time;
    private int nsamples;
    private long compute_time;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.xplordat.kbe.avro.EstimatedVertex.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sensor)) {
        this.sensor = data().deepCopy(fields()[0].schema(), other.sensor);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.X)) {
        this.X = data().deepCopy(fields()[1].schema(), other.X);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.Y)) {
        this.Y = data().deepCopy(fields()[2].schema(), other.Y);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.time)) {
        this.time = data().deepCopy(fields()[3].schema(), other.time);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.nsamples)) {
        this.nsamples = data().deepCopy(fields()[4].schema(), other.nsamples);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.compute_time)) {
        this.compute_time = data().deepCopy(fields()[5].schema(), other.compute_time);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing EstimatedVertex instance
     * @param other The existing instance to copy.
     */
    private Builder(com.xplordat.kbe.avro.EstimatedVertex other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.sensor)) {
        this.sensor = data().deepCopy(fields()[0].schema(), other.sensor);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.X)) {
        this.X = data().deepCopy(fields()[1].schema(), other.X);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Y)) {
        this.Y = data().deepCopy(fields()[2].schema(), other.Y);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.time)) {
        this.time = data().deepCopy(fields()[3].schema(), other.time);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.nsamples)) {
        this.nsamples = data().deepCopy(fields()[4].schema(), other.nsamples);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.compute_time)) {
        this.compute_time = data().deepCopy(fields()[5].schema(), other.compute_time);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'sensor' field.
      * @return The value.
      */
    public java.lang.String getSensor() {
      return sensor;
    }


    /**
      * Sets the value of the 'sensor' field.
      * @param value The value of 'sensor'.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.EstimatedVertex.Builder setSensor(java.lang.String value) {
      validate(fields()[0], value);
      this.sensor = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sensor' field has been set.
      * @return True if the 'sensor' field has been set, false otherwise.
      */
    public boolean hasSensor() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sensor' field.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.EstimatedVertex.Builder clearSensor() {
      sensor = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'X' field.
      * @return The value.
      */
    public double getX() {
      return X;
    }


    /**
      * Sets the value of the 'X' field.
      * @param value The value of 'X'.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.EstimatedVertex.Builder setX(double value) {
      validate(fields()[1], value);
      this.X = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'X' field has been set.
      * @return True if the 'X' field has been set, false otherwise.
      */
    public boolean hasX() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'X' field.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.EstimatedVertex.Builder clearX() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'Y' field.
      * @return The value.
      */
    public double getY() {
      return Y;
    }


    /**
      * Sets the value of the 'Y' field.
      * @param value The value of 'Y'.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.EstimatedVertex.Builder setY(double value) {
      validate(fields()[2], value);
      this.Y = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'Y' field has been set.
      * @return True if the 'Y' field has been set, false otherwise.
      */
    public boolean hasY() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'Y' field.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.EstimatedVertex.Builder clearY() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public long getTime() {
      return time;
    }


    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.EstimatedVertex.Builder setTime(long value) {
      validate(fields()[3], value);
      this.time = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.EstimatedVertex.Builder clearTime() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'nsamples' field.
      * @return The value.
      */
    public int getNsamples() {
      return nsamples;
    }


    /**
      * Sets the value of the 'nsamples' field.
      * @param value The value of 'nsamples'.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.EstimatedVertex.Builder setNsamples(int value) {
      validate(fields()[4], value);
      this.nsamples = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'nsamples' field has been set.
      * @return True if the 'nsamples' field has been set, false otherwise.
      */
    public boolean hasNsamples() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'nsamples' field.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.EstimatedVertex.Builder clearNsamples() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'compute_time' field.
      * @return The value.
      */
    public long getComputeTime() {
      return compute_time;
    }


    /**
      * Sets the value of the 'compute_time' field.
      * @param value The value of 'compute_time'.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.EstimatedVertex.Builder setComputeTime(long value) {
      validate(fields()[5], value);
      this.compute_time = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'compute_time' field has been set.
      * @return True if the 'compute_time' field has been set, false otherwise.
      */
    public boolean hasComputeTime() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'compute_time' field.
      * @return This builder.
      */
    public com.xplordat.kbe.avro.EstimatedVertex.Builder clearComputeTime() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EstimatedVertex build() {
      try {
        EstimatedVertex record = new EstimatedVertex();
        record.sensor = fieldSetFlags()[0] ? this.sensor : (java.lang.String) defaultValue(fields()[0]);
        record.X = fieldSetFlags()[1] ? this.X : (java.lang.Double) defaultValue(fields()[1]);
        record.Y = fieldSetFlags()[2] ? this.Y : (java.lang.Double) defaultValue(fields()[2]);
        record.time = fieldSetFlags()[3] ? this.time : (java.lang.Long) defaultValue(fields()[3]);
        record.nsamples = fieldSetFlags()[4] ? this.nsamples : (java.lang.Integer) defaultValue(fields()[4]);
        record.compute_time = fieldSetFlags()[5] ? this.compute_time : (java.lang.Long) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EstimatedVertex>
    WRITER$ = (org.apache.avro.io.DatumWriter<EstimatedVertex>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EstimatedVertex>
    READER$ = (org.apache.avro.io.DatumReader<EstimatedVertex>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.sensor);

    out.writeDouble(this.X);

    out.writeDouble(this.Y);

    out.writeLong(this.time);

    out.writeInt(this.nsamples);

    out.writeLong(this.compute_time);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.sensor = in.readString();

      this.X = in.readDouble();

      this.Y = in.readDouble();

      this.time = in.readLong();

      this.nsamples = in.readInt();

      this.compute_time = in.readLong();

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.sensor = in.readString();
          break;

        case 1:
          this.X = in.readDouble();
          break;

        case 2:
          this.Y = in.readDouble();
          break;

        case 3:
          this.time = in.readLong();
          break;

        case 4:
          this.nsamples = in.readInt();
          break;

        case 5:
          this.compute_time = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










